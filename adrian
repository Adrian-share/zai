<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gravity Racer - Low Gravity Racing Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .game-container {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        canvas {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            display: block;
            background: #000;
        }

        .game-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            color: white;
            font-size: 18px;
        }

        .score {
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .controls {
            margin-top: 15px;
            text-align: center;
            color: white;
            font-size: 14px;
        }

        .control-key {
            display: inline-block;
            background: rgba(255, 255, 255, 0.2);
            padding: 5px 10px;
            border-radius: 5px;
            margin: 0 5px;
            font-weight: bold;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
        }

        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            display: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .game-over h2 {
            font-size: 36px;
            margin-bottom: 20px;
            color: #ff6b6b;
        }

        .game-over p {
            font-size: 24px;
            margin-bottom: 25px;
        }

        .restart-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 18px;
            border-radius: 30px;
            cursor: pointer;
            transition: transform 0.3s, box-shadow 0.3s;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }

        .restart-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.4);
        }

        .start-screen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 40px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .start-screen h1 {
            font-size: 48px;
            margin-bottom: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .start-screen p {
            font-size: 18px;
            margin-bottom: 30px;
            line-height: 1.6;
        }

        .start-btn {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            color: white;
            border: none;
            padding: 20px 60px;
            font-size: 24px;
            border-radius: 40px;
            cursor: pointer;
            transition: transform 0.3s, box-shadow 0.3s;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            font-weight: bold;
        }

        .start-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
        }

        .gravity-indicator {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 20px;
            color: white;
            font-weight: bold;
            backdrop-filter: blur(10px);
            z-index: 100;
        }

        .gravity-indicator::before {
            content: "üåå ";
            font-size: 20px;
        }
    </style>
</head>
<body>
    <div class="gravity-indicator">Low Gravity Mode</div>
    
    <div class="game-container">
        <div class="game-info">
            <div class="score">Score: <span id="score">0</span></div>
            <div class="score">Speed: <span id="speed">0</span> km/h</div>
        </div>
        
        <canvas id="gameCanvas" width="800" height="400"></canvas>
        
        <div class="controls">
            <span class="control-key">‚Üë</span> Jump / Boost
            <span class="control-key">‚Üê</span> Move Left
            <span class="control-key">‚Üí</span> Move Right
            <span class="control-key">‚Üì</span> Fast Fall
        </div>
    </div>

    <div class="start-screen" id="startScreen">
        <h1>Gravity Racer</h1>
        <p>Welcome to the future of racing!<br>
        Experience the thrill of low gravity racing where you can soar through the air.<br>
        Avoid obstacles and collect power-ups to achieve the highest score!</p>
        <button class="start-btn" id="startBtn">Start Racing</button>
    </div>

    <div class="game-over" id="gameOverScreen">
        <h2>Game Over!</h2>
        <p>Final Score: <span id="finalScore">0</span></p>
        <button class="restart-btn" id="restartBtn">Race Again</button>
    </div>

    <script>
        // Game variables
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        let gameRunning = false;
        let score = 0;
        let gameSpeed = 5;
        let animationId;
        
        // Low gravity settings
        const GRAVITY = 0.15; // Lower than normal gravity
        const JUMP_FORCE = -12; // Higher jump force
        const MAX_FALL_SPEED = 8; // Slower max fall speed
        
        // Player car
        const car = {
            x: 100,
            y: 250,
            width: 60,
            height: 30,
            velocityY: 0,
            onGround: false,
            color: '#ff6b6b',
            trail: []
        };
        
        // Game objects
        let obstacles = [];
        let powerUps = [];
        let particles = [];
        let roadLines = [];
        
        // Initialize road lines
        function initRoadLines() {
            roadLines = [];
            for (let i = 0; i < 20; i++) {
                roadLines.push({
                    x: i * 50,
                    y: 0,
                    width: 5,
                    height: canvas.height
                });
            }
        }
        
        // Input handling
        const keys = {};
        document.addEventListener('keydown', (e) => {
            keys[e.key] = true;
            if (e.key === 'ArrowUp' && car.onGround && gameRunning) {
                car.velocityY = JUMP_FORCE;
                car.onGround = false;
                createJumpParticles();
            }
        });
        
        document.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });
        
        // Particle system
        function createJumpParticles() {
            for (let i = 0; i < 10; i++) {
                particles.push({
                    x: car.x + car.width / 2,
                    y: car.y + car.height,
                    vx: (Math.random() - 0.5) * 4,
                    vy: Math.random() * -3,
                    size: Math.random() * 5 + 2,
                    color: `hsl(${Math.random() * 60 + 180}, 100%, 50%)`,
                    life: 1
                });
            }
        }
        
        function createSpeedParticles() {
            if (Math.random() < 0.3) {
                particles.push({
                    x: car.x,
                    y: car.y + Math.random() * car.height,
                    vx: -Math.random() * 5 - 2,
                    vy: (Math.random() - 0.5) * 2,
                    size: Math.random() * 3 + 1,
                    color: 'rgba(255, 255, 255, 0.5)',
                    life: 1
                });
            }
        }
        
        // Obstacle generation
        function createObstacle() {
            const types = ['box', 'spike', 'moving'];
            obstacles.push({
                x: canvas.width,
                y: Math.random() < 0.5 ? 280 : 150,
                width: 40,
                height: 40,
                type: types[Math.floor(Math.random() * types.length)],
                speed: gameSpeed + Math.random() * 2
            });
        }
        
        // Power-up generation
        function createPowerUp() {
            powerUps.push({
                x: canvas.width,
                y: Math.random() * 200 + 100,
                width: 30,
                height: 30,
                type: 'boost',
                collected: false,
                rotation: 0
            });
        }
        
        // Update game objects
        function update() {
            if (!gameRunning) return;
            
            // Update car physics
            if (keys['ArrowLeft'] && car.x > 0) {
                car.x -= 5;
            }
            if (keys['ArrowRight'] && car.x < canvas.width - car.width) {
                car.x += 5;
            }
            if (keys['ArrowDown'] && !car.onGround) {
                car.velocityY = Math.min(car.velocityY + 0.5, MAX_FALL_SPEED);
            }
            
            // Apply gravity
            if (!car.onGround) {
                car.velocityY += GRAVITY;
                car.velocityY = Math.min(car.velocityY, MAX_FALL_SPEED);
            }
            
            car.y += car.velocityY;
            
            // Ground collision
            if (car.y > 280) {
                car.y = 280;
                car.velocityY = 0;
                car.onGround = true;
            }
            
            // Update car trail
            car.trail.push({ x: car.x, y: car.y + car.height / 2 });
            if (car.trail.length > 20) {
                car.trail.shift();
            }
            
            // Update road lines
            roadLines.forEach(line => {
                line.x -= gameSpeed;
                if (line.x < -50) {
                    line.x = canvas.width;
                }
            });
            
            // Update obstacles
            obstacles = obstacles.filter(obstacle => {
                obstacle.x -= obstacle.speed;
                
                // Moving obstacle behavior
                if (obstacle.type === 'moving') {
                    obstacle.y += Math.sin(Date.now() * 0.003) * 2;
                }
                
                // Check collision
                if (car.x < obstacle.x + obstacle.width &&
                    car.x + car.width > obstacle.x &&
                    car.y < obstacle.y + obstacle.height &&
                    car.y + car.height > obstacle.y) {
                    gameOver();
                    return false;
                }
                
                return obstacle.x > -obstacle.width;
            });
            
            // Update power-ups
            powerUps = powerUps.filter(powerUp => {
                powerUp.x -= gameSpeed;
                powerUp.rotation += 0.1;
                
                // Check collection
                if (car.x < powerUp.x + powerUp.width &&
                    car.x + car.width > powerUp.x &&
                    car.y < powerUp.y + powerUp.height &&
                    car.y + car.height > powerUp.y &&
                    !powerUp.collected) {
                    powerUp.collected = true;
                    score += 50;
                    createCollectParticles(powerUp.x + powerUp.width / 2, powerUp.y + powerUp.height / 2);
                    return false;
                }
                
                return powerUp.x > -powerUp.width;
            });
            
            // Update particles
            particles = particles.filter(particle => {
                particle.x += particle.vx;
                particle.y += particle.vy;
                particle.vy += 0.2;
                particle.life -= 0.02;
                particle.size *= 0.98;
                return particle.life > 0;
            });
            
            // Create speed particles
            createSpeedParticles();
            
            // Increase difficulty
            gameSpeed += 0.001;
            score += 1;
            
            // Spawn new objects
            if (Math.random() < 0.02) createObstacle();
            if (Math.random() < 0.005) createPowerUp();
            
            // Update UI
            document.getElementById('score').textContent = score;
            document.getElementById('speed').textContent = Math.floor(gameSpeed * 20);
        }
        
        function createCollectParticles(x, y) {
            for (let i = 0; i < 20; i++) {
                const angle = (Math.PI * 2 * i) / 20;
                particles.push({
                    x: x,
                    y: y,
                    vx: Math.cos(angle) * 5,
                    vy: Math.sin(angle) * 5,
                    size: 4,
                    color: '#ffd93d',
                    life: 1
                });
            }
        }
        
        // Render game
        function render() {
            // Clear canvas
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw road
            ctx.fillStyle = '#2c3e50';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw road lines
            ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
            roadLines.forEach(line => {
                ctx.fillRect(line.x, line.y, line.width, line.height);
            });
            
            // Draw ground
            ctx.fillStyle = '#34495e';
            ctx.fillRect(0, 310, canvas.width, 90);
            
            // Draw car trail
            ctx.strokeStyle = 'rgba(255, 107, 107, 0.3)';
            ctx.lineWidth = 3;
            ctx.beginPath();
            car.trail.forEach((point, index) => {
                if (index === 0) {
                    ctx.moveTo(point.x, point.y);
                } else {
                    ctx.lineTo(point.x, point.y);
                }
            });
            ctx.stroke();
            
            // Draw particles
            particles.forEach(particle => {
                ctx.globalAlpha = particle.life;
                ctx.fillStyle = particle.color;
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fill();
            });
            ctx.globalAlpha = 1;
            
            // Draw power-ups
            powerUps.forEach(powerUp => {
                ctx.save();
                ctx.translate(powerUp.x + powerUp.width / 2, powerUp.y + powerUp.height / 2);
                ctx.rotate(powerUp.rotation);
                
                // Glow effect
                ctx.shadowBlur = 20;
                ctx.shadowColor = '#ffd93d';
                
                ctx.fillStyle = '#ffd93d';
                ctx.fillRect(-powerUp.width / 2, -powerUp.height / 2, powerUp.width, powerUp.height);
                
                // Star shape
                ctx.fillStyle = '#fff';
                ctx.font = '20px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText('‚≠ê', 0, 0);
                
                ctx.restore();
            });
            
            // Draw obstacles
            obstacles.forEach(obstacle => {
                ctx.fillStyle = obstacle.type === 'spike' ? '#e74c3c' : 
                               obstacle.type === 'moving' ? '#9b59b6' : '#3498db';
                
                if (obstacle.type === 'spike') {
                    // Draw triangle spike
                    ctx.beginPath();
                    ctx.moveTo(obstacle.x + obstacle.width / 2, obstacle.y);
                    ctx.lineTo(obstacle.x, obstacle.y + obstacle.height);
                    ctx.lineTo(obstacle.x + obstacle.width, obstacle.y + obstacle.height);
                    ctx.closePath();
                    ctx.fill();
                } else {
                    ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
                }
            });
            
            // Draw car
            ctx.save();
            
            // Car glow when in air
            if (!car.onGround) {
                ctx.shadowBlur = 20;
                ctx.shadowColor = car.color;
            }
            
            // Car body
            ctx.fillStyle = car.color;
            ctx.fillRect(car.x, car.y, car.width, car.height);
            
            // Car details
            ctx.fillStyle = '#fff';
            ctx.fillRect(car.x + 10, car.y + 5, 15, 10);
            ctx.fillRect(car.x + 35, car.y + 5, 15, 10);
            
            // Wheels
            ctx.fillStyle = '#2c3e50';
            ctx.fillRect(car.x + 5, car.y + car.height - 5, 10, 5);
            ctx.fillRect(car.x + car.width - 15, car.y + car.height - 5, 10, 5);
            
            ctx.restore();
        }
        
        // Game loop
        function gameLoop() {
            update();
            render();
            if (gameRunning) {
                animationId = requestAnimationFrame(gameLoop);
            }
        }
        
        // Game control functions
        function startGame() {
            console.log('Starting game...');
            document.getElementById('startScreen').style.display = 'none';
            gameRunning = true;
            initRoadLines();
            gameLoop();
        }
        
        function gameOver() {
            gameRunning = false;
            cancelAnimationFrame(animationId);
            document.getElementById('finalScore').textContent = score;
            document.getElementById('gameOverScreen').style.display = 'block';
        }
        
        function restartGame() {
            // Reset game state
            score = 0;
            gameSpeed = 5;
            car.x = 100;
            car.y = 250;
            car.velocityY = 0;
            car.onGround = false;
            car.trail = [];
            obstacles = [];
            powerUps = [];
            particles = [];
            
            // Hide game over screen
            document.getElementById('gameOverScreen').style.display = 'none';
            
            // Start game
            gameRunning = true;
            gameLoop();
        }
        
        // Event listeners
        document.getElementById('startBtn').addEventListener('click', startGame);
        document.getElementById('restartBtn').addEventListener('click', restartGame);
        
        // Initialize road lines on load
        initRoadLines();
    </script>
</body>
</html>
